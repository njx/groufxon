<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               initialize="initializeHandler(event)"
			   applicationDPI="160"
               resize="resizeHandler(event)"
               xmlns:components="components.*"
			   resizeForSoftKeyboard="false">
 	<!-- TODO: splash screen, icon -->
 	<fx:Style source="assets/styles.css"/>
    <fx:Script>
        <![CDATA[           
			import mx.events.ResizeEvent;
			
			import spark.transitions.CrossFadeViewTransition;
			
			import views.DetailView;
 
            // Coordinates
            private const LIST_WIDTH:Number = 400;  // Width of list in Tablet Landscape orientation
            private const LIST_HEIGHT:Number = 250; // Height of list in Tablet Portrait orientation
			private const ACTIONBAR_HEIGHT: Number = 46;

            private function initializeHandler(event:Event):void
            {
                systemManager.stage.addEventListener(KeyboardEvent.KEY_DOWN, deviceKeyDownHandler);
                systemManager.stage.addEventListener(KeyboardEvent.KEY_UP, deviceKeyUpHandler);
            }
            
            private function resizeHandler(event:ResizeEvent):void
            {
                var isPortrait:Boolean = height > width;
                var isTablet:Boolean = height > 960 || width > 960;
                
               currentState = (isPortrait ? "portrait" : "landscape") + (isTablet ? "Tablet" : "Phone");
            }  
            
            private function deviceKeyDownHandler(event:KeyboardEvent):void
            {
                var key:uint = event.keyCode;
                
                // The default behavior for the back key (when it's not being handled by
				// ViewNavigatorApplication) is to jump out of the app to the OS home screen.
				// In our case, if we have a view to pop back to on the navigator stack, we
				// don't want this default behavior.
                if (key == Keyboard.BACK)
                {
                    if (mainNavigator.length > 1)
                        event.preventDefault();
                }
            }
            
            private function deviceKeyUpHandler(event:KeyboardEvent):void
            {
                var key:uint = event.keyCode;
                
                if (key == Keyboard.BACK && mainNavigator.length > 1)
                    mainNavigator.popView();
            }

        ]]>
    </fx:Script>
    <s:states>
        <s:State name="landscapeTablet" stateGroups="landscape, tablet" />
        <s:State name="portraitTablet" stateGroups="portrait, tablet" />
        <s:State name="portraitPhone" stateGroups="portrait, phone" />
        <s:State name="landscapePhone" stateGroups="landscape, phone" />
    </s:states>
	
	<!-- ViewNavigator -->
	<!-- The resize handler here is to work around a bug where ViewNavigator doesn't currently clip its children, so if
		 it doesn't fill the whole screen, views sliding out of the navigator overlap other content. (SDK-29309) -->
	<s:ViewNavigator id="mainNavigator" left="0" left.landscapeTablet="{LIST_WIDTH}" 
					 top="0" top.portraitTablet="{ACTIONBAR_HEIGHT + LIST_HEIGHT}" 
					 right="0" bottom="0"
					 firstView="views.SummaryView" firstView.tablet="views.DetailView"
					 resize="mainNavigator.scrollRect = new Rectangle(0, 0, mainNavigator.width, mainNavigator.height)"/>  
	
	<!-- Deal summary list -->
	<!-- This is after the ViewNavigator so that its dropshadow will draw above the ViewNavigator. If we change it to use a bitmap we
	can move it back to its natural position. -->
	<s:ActionBar includeIn="tablet" top="0" left="0" right.portraitTablet="0" width.landscapeTablet="{LIST_WIDTH}" title="Groupon Deals">
		<s:actionContent>
			<s:Button click="dealSummaryList.refresh()">
				<s:icon>
					<s:MultiDPIBitmapSource
						source160dpi="@Embed('assets/refresh160.png')"
						source240dpi="@Embed('assets/refresh240.png')"
						source320dpi="@Embed('assets/refresh320.png')"/>
				</s:icon>
			</s:Button>
		</s:actionContent>
	</s:ActionBar>
	<components:SummaryList id="dealSummaryList" includeIn="tablet" top="{ACTIONBAR_HEIGHT}" left="0" 
							bottom.landscapeTablet="0" right.portraitTablet="0" 
							width.landscapeTablet="{LIST_WIDTH}" height.portraitTablet="{LIST_HEIGHT}"
							change="mainNavigator.replaceView(views.DetailView, dealSummaryList.list.selectedItem, null, new CrossFadeViewTransition())"
							currentState="{currentState == 'portraitTablet' ? 'grid' : (currentState == 'landscapeTablet' ? 'listTablet' : 'listPhone')}">
		<components:filters>
			<s:DropShadowFilter angle.landscapeTablet="0" blurX.landscapeTablet="4" blurY.landscapeTablet="0" 
								angle.portraitTablet="90" blurX.portraitTablet="0" blurY.portraitTablet="4"
								strength="1" alpha="0.3"/>
		</components:filters>
	</components:SummaryList>
	
	<!-- Vertical separator between summary list and view navigator in tablet landscape mode -->
	<s:Line includeIn="landscapeTablet" top="0" bottom="0" left="{LIST_WIDTH}">
		<s:stroke>
			<s:SolidColorStroke color="#666666"/>
		</s:stroke>
	</s:Line>
</s:Application>
