<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"               
        xmlns:deals="services.deals.*"
        initialize="initializeHandler(event)"
		currentState="listPhone">
    <!--
    TODO:
    add fault handler to Deals service
	make label size smaller on phone
	Ugly code for item renderers based on state. can we improve this? (maybe use bitmap for placeholder)
    -->
    
    <fx:Declarations>
        <s:CallResponder id="getDataResult"/>
        <deals:Deals id="deals" result="deals_resultHandler()" />
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

    <fx:Metadata>
        [Event(name="change", type="spark.events.IndexChangeEvent")]
    </fx:Metadata>
	
	<s:states>
		<s:State name="listPhone" stateGroups="list"/>
		<s:State name="listTablet" stateGroups="list"/>
		<s:State name="grid"/>
	</s:states>
    
    <fx:Script>
        <![CDATA[
			import flash.sensors.Geolocation;
			
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
            private var geoloc:Geolocation = new Geolocation();
            
            // Variables used to access the Groupon API
            private var client_id:String = "aef59cde704294ebd0f5f5984649b0a0172db517";
            private var lat:Number = 37.77136491;       // Default to coordinates of Adobe SF offics
            private var lng:Number = -122.40096462;
            private var radius:Number = 50;
            private var show:String = "all";
			
			public function refresh(): void {
				if (busyIndicator)
				{
					busyIndicator.visible = busyIndicator.includeInLayout = true;
				}
				list.dataProvider = null;
				getDeals();
			}
            
            private function initializeHandler(event:FlexEvent):void
            {
                // If Geolocation is supported, use it. 
                if (Geolocation.isSupported)
                {
                    geoloc.addEventListener(GeolocationEvent.UPDATE, geoloc_updateHandler);
                }
                else
                {
                    // get the deals now
                    refresh();
                }
            }
            
            private function geoloc_updateHandler(event:GeolocationEvent):void
            {
                lat = event.latitude;
                lng = event.longitude;
                
                geoloc.removeEventListener(GeolocationEvent.UPDATE, geoloc_updateHandler);
                getDeals();
            }
             
            private function deals_resultHandler():void
            {
                if (busyIndicator)
                {
                    busyIndicator.visible = busyIndicator.includeInLayout = false;
                }

				// Select the first deal so the user isn't starting at empty space.
				if (currentState != 'listPhone' && IList(getDataResult.lastResult).length > 0) {
					list.selectedIndex = 0;
					dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
				}
            }
            
            protected function getDeals():void
            {
                getDataResult.token = deals.getData(client_id, String(lat), String(lng), String(radius), show);
            }
            
        ]]>
    </fx:Script>
    
    <!-- Main list -->
    <s:List id="list" left="0" top="0" right="0" bottom="0" dataProvider="{getDataResult.lastResult}" change="dispatchEvent(event);">
		<s:layout.grid>
			<s:TileLayout paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5"/>
		</s:layout.grid>
        <s:itemRenderer.listTablet>
            <fx:Component>
                <s:IconItemRenderer styleName="summary" labelField="" messageField="announcementTitle" 
									iconField="mediumImageUrl" iconWidth="100" iconHeight="61"
									iconPlaceholder="{assets.LoadingIcon}">
					<fx:Script>
						<![CDATA[
							import assets.LoadingIcon;
						]]>
					</fx:Script>
				</s:IconItemRenderer>

            </fx:Component>
        </s:itemRenderer.listTablet>
		<s:itemRenderer.listPhone>
			<fx:Component>
				<s:IconItemRenderer styleName="summary" labelField="" messageField="announcementTitle" 
									iconField="smallImageUrl" iconWidth="50" iconHeight="30"
									iconPlaceholder="{assets.LoadingIcon}">
					<fx:Script>
						<![CDATA[
							import assets.LoadingIcon;
						]]>
					</fx:Script>
				</s:IconItemRenderer>
				
			</fx:Component>
		</s:itemRenderer.listPhone>
		<s:itemRenderer.grid>
			<fx:Component>
				<s:IconItemRenderer styleName="summary" labelField=""
									iconField="mediumImageUrl" iconWidth="100" iconHeight="61"
									iconPlaceholder="{assets.LoadingIcon}">
					<fx:Script>
						<![CDATA[
							import assets.LoadingIcon;
						]]>
					</fx:Script>
				</s:IconItemRenderer>
				
			</fx:Component>
		</s:itemRenderer.grid>    
	</s:List>

    
    <!-- Busy indicator -->
    <s:Group id="busyIndicator" horizontalCenter="0" verticalCenter="0">
        <s:BusyIndicator horizontalCenter="0" />
        <s:Label text="Loading Nearby Deals..." top="30" />
    </s:Group>
</s:Group>
